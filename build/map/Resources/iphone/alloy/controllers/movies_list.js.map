{"version":3,"sources":["template.js","app/controllers/movies_list.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnxMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/samueleast/Documents/Appcelerator_Studio_Workspace/OTNet/Resources/iphone/alloy/controllers/movies_list.js","sourceRoot":"/Users/samueleast/Documents/Appcelerator_Studio_Workspace/OTNet","sourcesContent":["var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n\n\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\t\n\trequire('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = 'movies_list';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar __parentSymbol = __processArg(arguments[0], '__parentSymbol');\n\t\tvar $model = __processArg(arguments[0], '$model');\n\t\tvar __itemTemplate = __processArg(arguments[0], '__itemTemplate');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\t\n\n\t// Generated UI code\n\t$.__views.window = Ti.UI.createWindow(\n{navBarHidden:true,orientationModes:[Ti.UI.PORTRAIT,],backgroundColor:\"#000000\",id:\"window\",}\n);\n$.__views.window && $.addTopLevelView($.__views.window);\nif ((OS_IOS)) {\n$.__views.tableview_header = Ti.UI.createView(\n{backgroundColor:\"#b0332a\",height:64,id:\"tableview_header\",}\n);\n}\nif ((OS_IOS)) {\n$.__views.pull_view = Ti.UI.createView(\n{backgroundColor:\"#b0332a\",id:\"pull_view\",}\n);\n}\n$.__views.tableview = Ti.UI.createTableView(\n{top:0,left:0,width:Ti.UI.FILL,height:Ti.UI.FILL,backgroundColor:\"transparent\",pullBackgroundColor:\"#b0332a\",showVerticalScrollIndicator:false,opacity:0,tableSeparatorInsets:{left:0,right:0,},separatorStyle:Titanium.UI.TABLE_VIEW_SEPARATOR_STYLE_NONE,headerView:$.__views.tableview_header,headerPullView:$.__views.pull_view,id:\"tableview\",}\n);\n$.__views.window.add($.__views.tableview);\n$.__views.activity_indicator = Ti.UI.createActivityIndicator(\n{style:Ti.UI.ActivityIndicatorStyle.BIG,height:Ti.UI.SIZE,width:Ti.UI.SIZE,color:\"#ff0000\",id:\"activity_indicator\",}\n);\n$.__views.window.add($.__views.activity_indicator);\n$.__views.navbar = Alloy.createController('views/navbar',{id:\"navbar\",__parentSymbol:$.__views.window,});\n$.__views.navbar.setParent($.__views.window);\nexports.destroy = function () {};\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;\n","var api = require('apiService');\nvar Data = require('/data');\n\nvar args = arguments[0] || {};\n\nvar movies = [];\nvar tableView_data = [];\nvar tableview_offset_per_px = 0;\nvar tableview_cell_offset = 0;\n\nvar that = this;\n\n/**\n                  * init\n                  */\nfunction init() {\n\n  $.window.removeEventListener(\"open\", init);\n\n  // not required when loading local data\n  // $.activity_indicator.show();\n\n  var diff = Alloy.Globals.layout.list.row.imageHeight - Alloy.Globals.layout.list.row.height;\n  tableview_offset_per_px = diff / $.tableview.rect.height;\n  tableview_cell_offset = tableview_offset_per_px * Alloy.Globals.layout.list.row.height;\n\n  if (args.type == 'search') {\n\n    search(args.query);\n\n  } else if (args.type == 'season') {\n\n    season(args.id);\n\n  } else {\n\n    fetchCollection(args.id);\n\n  }\n\n  if (OS_IOS) {\n    $.navbar.background_view.opacity = 0;\n  }\n\n\n}\n\n\n/**\n   * fetch collection\n   * @param {String} \ttype (list, genre)\n   * @param {String} \tid\n   */\nfunction fetchCollection(id) {\n\n  api.getService({\n    endpoint: '/v1/players?terms_id=' + id },\n  function (_response) {\n\n    if (_response.status) {\n\n      $.navbar.title_label.text = args.title.toUpperCase();\n\n      movies = _response.data;\n      populateMovies(movies);\n\n\n    } else {\n\n      alert(_response.message);\n\n    }\n\n  });\n\n}\n\n/**\n   * search\n   * @param {String} \tquery\n   */\nfunction search(query) {\n\n  api.getService({\n    endpoint: '/v1/players?search=' + query },\n  function (_response) {\n\n    if (_response.status) {\n\n      $.navbar.title_label.text = \"Results for '\" + query + \"'\";\n\n      movies = _response.data;\n      populateMovies(movies);\n\n\n    } else {\n\n      alert(_response.message);\n\n    }\n\n  });\n\n}\n\n/**\n   * search\n   * @param {String} \tquery\n   */\nfunction season(id) {\n\n  api.getService({\n    endpoint: \"/v1/players?seasons_id=\" + id },\n  function (_response) {\n\n    if (_response.status) {\n\n      $.navbar.title_label.text = args.title.toUpperCase();\n      movies = _response.data;\n      populateMovies(movies);\n\n    } else {\n\n      alert(_response.message);\n\n    }\n\n  });\n\n}\n\n/**\n   * populateMovies\n   * @param {Array} \tmovies\n   */\nfunction populateMovies(movies) {\n\n  tableView_data = [];\n  var tableView_rows = [];\n\n  for (var i = 0; i < movies.length; i++) {\n\n    var movie = movies[i];\n\n    var cell = Alloy.createController(\"/views/movies_list_cell\");\n    cell.updateViews({\n      \"#title_label\": {\n        text: movie.title },\n\n      \"#thumbnail_imageview\": {\n        top: OS_IOS ? cellImageOffset(i) : 0,\n        image: movie.images.length > 0 ? movie.images[0].src : 'https://via.placeholder.com/1280x720' } });\n\n\n\n    tableView_data.push(cell);\n    tableView_rows.push(cell.getView());\n  }\n\n  $.tableview.setData(tableView_rows);\n\n  $.activity_indicator.hide();\n\n  var tableview_animation = Ti.UI.createAnimation({\n    opacity: 1,\n    duration: 500,\n    curve: Titanium.UI.ANIMATION_CURVE_EASE_OUT });\n\n  $.tableview.animate(tableview_animation);\n}\n\n/**\n   * cell offset\n   * @param {Number} idx\n   * @param {Number} scroll_offset\n   */\nfunction cellImageOffset(idx, scroll_offset) {\n  scroll_offset = scroll_offset || 0;\n  var offset = (scroll_offset - 64) * tableview_offset_per_px - idx * tableview_cell_offset;\n  offset = Math.min(offset, 0);\n  offset = Math.max(offset, Alloy.Globals.layout.list.row.height - Alloy.Globals.layout.list.row.imageHeight);\n  return offset;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n//\n// event handlers\n//\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * window open\n */\n$.window.addEventListener(\"open\", init);\n\n\n/**\n                                          * tableview click\n                                          */\n$.tableview.addEventListener(\"click\", function (e) {\n  $.tableview.touchEnabled = false;\n  tableView_data[e.index].animateClick(function () {\n    var movie = movies[e.index];\n    Alloy.Globals.Navigator.push(\"movie\", { code: movie.code });\n    setTimeout(function () {\n      $.tableview.touchEnabled = true;\n    }, 1000);\n  });\n});\n\n\nif (OS_IOS) {\n\n  /**\n              * tableview scroll - handle navbar\n              */\n  $.tableview.addEventListener('scroll', function (e) {\n    var offset = e.contentOffset.y;\n    $.navbar.background_view.opacity = Math.min(offset / 44, 1);\n    $.navbar.content.opacity = Math.min(1 - offset / 44, 1);\n  });\n\n  (function startScrollAnimation() {\n\n    if (!Ti.App.Properties.getBool(Alloy.Globals.PROPERTY_ENABLE_LIST_ANIMATION)) {\n      return;\n    }\n\n    /**\n       * tableview postlayout\n       */\n    $.tableview.addEventListener('postlayout', function tableviewPostLayout(e) {\n\n      var height = e.source.rect.height;\n      if (height > 0 && height <= Alloy.Globals.deviceHeight) {\n\n        var diff = Alloy.Globals.layout.list.row.imageHeight - Alloy.Globals.layout.list.row.height;\n        tableview_offset_per_px = diff / height;\n        tableview_cell_offset = tableview_offset_per_px * Alloy.Globals.layout.list.row.height;\n\n        $.tableview.removeEventListener('postlayout', tableviewPostLayout);\n      }\n    });\n\n    /**\n         * tableview scroll\n         */\n    $.tableview.addEventListener('scroll', function (e) {\n      var offset = e.contentOffset.y;\n      updateTableView(offset);\n    });\n\n  })();\n\n  /**\n         * updateTableView\n         * \n        \t * @param {Number} offset\n         */\n  function updateTableView(offset) {\n    for (var i = 0, num_rows = tableView_data.length; i < num_rows; i++) {\n      var row = tableView_data[i];\n      row.updateViews({\n        \"#thumbnail_imageview\": {\n          top: cellImageOffset(i, offset) } });\n\n\n    }\n  }\n}"]}